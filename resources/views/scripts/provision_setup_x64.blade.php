#!/usr/bin/env bash
set -euo pipefail

# Ensure script is running as root
if [ "$EUID" -ne 0 ]; then
  echo "[!] This script must be run as root user"
  echo "[!] Please run: 'sudo su' first"
  exit 1
fi

CALLBACK_STARTED_URL='{!! $callbackUrls['started'] ?? '' !!}'
CALLBACK_COMPLETED_URL='{!! $callbackUrls['completed'] ?? '' !!}'

notify_callback() {
  local url="$1"

  if [ -z "${url}" ]; then
    return
  fi

  if command -v curl >/dev/null 2>&1; then
    # Use -L to follow redirects and preserve POST method
    curl -L -X POST "$url" >/dev/null 2>&1 || true
  elif command -v wget >/dev/null 2>&1; then
    wget --method=POST -qO- "$url" >/dev/null 2>&1 || true
  fi
}

notify_callback "$CALLBACK_STARTED_URL"

# Generated by {{ $appName }} for server setup

ROOT_PASSWORD='{{ $rootPassword }}'

PUB_KEY_CONTENT=$(cat <<'EOF'
{{ $pubKeyContent }}
EOF
)

echo "[+] Starting provisioning for users: {{ $sshUser }} (root) and {{ $appUser }} (app)"

# Setup SSH for root user ({{ $sshUser }})
if [ "{{ $sshUser }}" = "root" ]; then
  # Ensure root SSH is set up and key is present
  if [ ! -d /root/.ssh ]; then
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
  fi
  if [ ! -f /root/.ssh/authorized_keys ]; then
    touch /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
  fi

  # Ensure strict ownership for SSH to accept keys
  chown root:root /root
  chown -R root:root /root/.ssh

  if ! grep -Fq "${PUB_KEY_CONTENT}" /root/.ssh/authorized_keys; then
    echo "${PUB_KEY_CONTENT}" >> /root/.ssh/authorized_keys
  fi

  echo "[+] Root user SSH authorized_keys configured"
else
  # Setup SSH for non-root ssh user if different
  if ! id -u "{{ $sshUser }}" >/dev/null 2>&1; then
    useradd -m -s /bin/bash "{{ $sshUser }}" || adduser --disabled-password --gecos "" "{{ $sshUser }}"
  fi

  mkdir -p "/home/{{ $sshUser }}/.ssh"
  if [ ! -f "/home/{{ $sshUser }}/.ssh/authorized_keys" ]; then
    touch "/home/{{ $sshUser }}/.ssh/authorized_keys"
  fi

  if ! grep -Fq "${PUB_KEY_CONTENT}" "/home/{{ $sshUser }}/.ssh/authorized_keys"; then
    echo "${PUB_KEY_CONTENT}" >> "/home/{{ $sshUser }}/.ssh/authorized_keys"
  fi

  chown -R "{{ $sshUser }}":"{{ $sshUser }}" "/home/{{ $sshUser }}/.ssh"
  chmod 700 "/home/{{ $sshUser }}/.ssh"
  chmod 600 "/home/{{ $sshUser }}/.ssh/authorized_keys"

  echo "[+] SSH user '{{ $sshUser }}' SSH authorized_keys configured"
fi

# Setup SSH for application user ({{ $appUser }})
if ! id -u "{{ $appUser }}" >/dev/null 2>&1; then
  useradd -m -s /bin/bash "{{ $appUser }}" || adduser --disabled-password --gecos "" "{{ $appUser }}"
fi

mkdir -p "/home/{{ $appUser }}/.ssh"
if [ ! -f "/home/{{ $appUser }}/.ssh/authorized_keys" ]; then
  touch "/home/{{ $appUser }}/.ssh/authorized_keys"
fi

if ! grep -Fq "${PUB_KEY_CONTENT}" "/home/{{ $appUser }}/.ssh/authorized_keys"; then
  echo "${PUB_KEY_CONTENT}" >> "/home/{{ $appUser }}/.ssh/authorized_keys"
fi

chown -R "{{ $appUser }}":"{{ $appUser }}" "/home/{{ $appUser }}/.ssh"
chmod 700 "/home/{{ $appUser }}/.ssh"
chmod 600 "/home/{{ $appUser }}/.ssh/authorized_keys"

echo "[+] App user '{{ $appUser }}' SSH authorized_keys configured"

# Set passwords for all configured users
echo "root:${ROOT_PASSWORD}" | chpasswd

# Set password for SSH user if different from root
if [ "{{ $sshUser }}" != "root" ]; then
  echo "{{ $sshUser }}:${ROOT_PASSWORD}" | chpasswd || true
fi

# Set password for application user
echo "{{ $appUser }}:${ROOT_PASSWORD}" | chpasswd || true

echo "[+] User passwords configured"

# Basic updates and common tools
if command -v apt-get >/dev/null 2>&1; then
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  apt-get install -y curl ca-certificates sudo

  echo "[+] Base packages installed"

  apt-get install -y openssh-server
  systemctl enable --now ssh 2>/dev/null || systemctl enable --now sshd 2>/dev/null || true

  echo "[+] OpenSSH installed"

  mkdir -p /etc/ssh/sshd_config.d
  ssh-keygen -A
  cat > /etc/ssh/sshd_config.d/49-brokeforge.conf <<'EOF'
# Managed by BrokeForge
Port {{ $sshPort ?? 22 }}
PasswordAuthentication no
PubkeyAuthentication yes
EOF
  systemctl restart ssh 2>/dev/null || systemctl restart sshd 2>/dev/null || true

  echo "[+] SSH configuration updated"

  # Generate SSH host keys if they don't exist
  ssh-keygen -A 2>/dev/null || true

  # Get the server's IP address for known_hosts
  SERVER_IP=$(ip route get 1 | awk '{print $7;exit}' 2>/dev/null || hostname -I | awk '{print $1}')

  # Add localhost entries to known_hosts for all users to prevent SSH prompts
  for user_home in /root /home/{{ $sshUser }} /home/{{ $appUser }}; do
    if [ -d "$user_home" ]; then
      mkdir -p "$user_home/.ssh"
      touch "$user_home/.ssh/known_hosts"
      ssh-keyscan -H localhost 2>/dev/null >> "$user_home/.ssh/known_hosts" || true
      ssh-keyscan -H 127.0.0.1 2>/dev/null >> "$user_home/.ssh/known_hosts" || true
      if [ -n "$SERVER_IP" ]; then
        ssh-keyscan -H "$SERVER_IP" 2>/dev/null >> "$user_home/.ssh/known_hosts" || true
      fi
      # Fix permissions
      if [ "$user_home" = "/root" ]; then
        chown root:root "$user_home/.ssh/known_hosts"
      elif [ "$user_home" = "/home/{{ $sshUser }}" ]; then
        chown {{ $sshUser }}:{{ $sshUser }} "$user_home/.ssh/known_hosts"
      elif [ "$user_home" = "/home/{{ $appUser }}" ]; then
        chown {{ $appUser }}:{{ $appUser }} "$user_home/.ssh/known_hosts"
      fi
      chmod 644 "$user_home/.ssh/known_hosts"
    fi
  done

  echo "[+] SSH known_hosts configured"

  if command -v ufw >/dev/null 2>&1; then
    ufw allow {{ $sshPort ?? 22 }}/tcp || true
  fi
  if command -v firewall-cmd >/dev/null 2>&1 && systemctl is-active --quiet firewalld; then
    firewall-cmd --permanent --add-port={{ $sshPort ?? 22 }}/tcp || true
    firewall-cmd --reload || true
  fi

  echo "[+] Firewall opened for SSH"
fi

echo "[âœ“] Provisioning bootstrap complete"

notify_callback "$CALLBACK_COMPLETED_URL"
